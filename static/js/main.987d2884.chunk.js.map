{"version":3,"sources":["components/Copyright.js","components/Output.js","components/FileList.js","App.js","serviceWorker.js","index.js"],"names":["Copyright","_ref","repoName","react_default","a","createElement","className","href","concat","target","rel","Output","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hash","_this2","reader","window","FileReader","readAsDataURL","file","onloadend","setState","result","value","readOnly","Component","FileList","files","map","console","log","filename","name","substring","lastIndexOf","key","preview","src","alt","src_components_Output","App","_useState","useState","_useState2","slicedToArray","setFiles","onDrop","useCallback","acceptedFiles","assign","URL","createObjectURL","_useDropzone","useDropzone","getRootProps","getInputProps","isDragActive","classNames","drop-zone_active","components_FileList","components_Copyright","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAwBeA,MArBf,SAAAC,GAA+B,IAAXC,EAAWD,EAAXC,SACnB,OACCC,EAAAC,EAAAC,cAAA,KACCC,UAAU,YACVC,KAAI,6BAAAC,OAA+BN,GACnCO,OAAO,SACPC,IAAI,uBAEJP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAhB,YAIC,IAEDH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAhB,0DCsBYK,qBAnCd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,KAAM,IAJWR,mFAQC,IAAAS,EAAAN,KACbO,EAAS,IAAIC,OAAOC,WAE1BF,EAAOG,cAAcV,KAAKJ,MAAMe,MAEhCJ,EAAOK,UAAY,WAClBN,EAAKO,SAAS,CACbR,KAAME,EAAOO,2CAMf,OAAKd,KAAKI,MAAMC,KAKflB,EAAAC,EAAAC,cAAA,YACCC,UAAU,SACVyB,MAAOf,KAAKI,MAAMC,KAClBW,UAAQ,IAPF,YAvBWC,oBCgCNC,MA/Bf,SAAAjC,GAA2B,IAARkC,EAAQlC,EAARkC,MAClB,OACChC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZ6B,EAAMC,IAAI,SAAAT,GACVU,QAAQC,IAAIX,GACZ,IAAMY,EAAWZ,EAAKa,KAAKC,UAAU,EAAGd,EAAKa,KAAKE,YAAY,MAE9D,OACCvC,EAAAC,EAAAC,cAAA,MAAIsC,IAAKhB,EAAKiB,SACbzC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,OACCwC,IAAKlB,EAAKiB,QACVE,IAAI,KAGL3C,EAAAC,EAAAC,cAAA,SACC0B,MAAOQ,EACPP,UAAQ,KAIV7B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBACfH,EAAAC,EAAAC,cAAC0C,EAAD,CAAQpB,KAAMA,sBCyBNqB,MA3Cf,WAAe,IAAAC,EACeC,mBAAS,IADxBC,EAAArC,OAAAsC,EAAA,EAAAtC,CAAAmC,EAAA,GACJd,EADIgB,EAAA,GACGE,EADHF,EAAA,GAGLG,EAASC,sBAAY,SAAAC,GACvBH,EAASG,EAAcpB,IAAI,SAAAT,GAAI,OAAIb,OAAO2C,OAAO9B,EAAM,CACnDiB,QAASc,IAAIC,gBAAgBhC,SAElC,IAPQiC,EAaPC,YAAY,CAACP,WAHbQ,EAVOF,EAUPE,aACAC,EAXOH,EAWPG,cACAC,EAZOJ,EAYPI,aAGJ,OACI7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,MAAAS,OAAA2C,OAAA,GACQK,IADR,CAEIxD,UAAW2D,IAAW,YAAa,CAC/BC,mBAAoBF,MAGxB7D,EAAAC,EAAAC,cAAA,QAAW0D,KAEVC,EACG7D,EAAAC,EAAAC,cAAA,uCAIAF,EAAAC,EAAAC,cAAA,wEAMRF,EAAAC,EAAAC,cAAC8D,EAAD,CAAUhC,MAAOA,IAEjBhC,EAAAC,EAAAC,cAAC+D,EAAD,CAAWlE,SAAS,qBClCZmE,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.987d2884.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Copyright.css';\r\n\r\nfunction Copyright({repoName}) {\r\n\treturn (\r\n\t\t<a\r\n\t\t\tclassName=\"copyright\"\r\n\t\t\thref={`https://github.com/vovanr/${repoName}`}\r\n\t\t\ttarget=\"_blank\"\r\n\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t>\r\n\t\t\t<span className=\"copyright__license\">\r\n\t\t\t\tMIT Â©\r\n\t\t\t</span>\r\n\r\n\t\t\t{' '}\r\n\r\n\t\t\t<span className=\"copyright__author\">\r\n\t\t\t\tVladimir Rodkin\r\n\t\t\t</span>\r\n\t\t</a>\r\n\t);\r\n}\r\n\r\nexport default Copyright;\r\n","import React, {Component} from 'react';\r\nimport './Output.css';\r\n\r\nclass Output extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\thash: ''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst reader = new window.FileReader();\r\n\r\n\t\treader.readAsDataURL(this.props.file);\r\n\r\n\t\treader.onloadend = () => {\r\n\t\t\tthis.setState({\r\n\t\t\t\thash: reader.result\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!this.state.hash) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<textarea\r\n\t\t\t\tclassName=\"output\"\r\n\t\t\t\tvalue={this.state.hash}\r\n\t\t\t\treadOnly\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Output;\r\n","import React from 'react';\r\nimport Output from './Output';\r\nimport './FileList.css';\r\n\r\nfunction FileList({files}) {\r\n\treturn(\r\n\t\t<ul className=\"file-list\">\r\n\t\t\t{files.map(file => {\r\n\t\t\t\tconsole.log(file)\r\n\t\t\t\tconst filename = file.name.substring(0, file.name.lastIndexOf('.'));\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li key={file.preview}>\r\n\t\t\t\t\t\t<span className=\"file-list__preview\">\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tsrc={file.preview}\r\n\t\t\t\t\t\t\t\talt=\"\"\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tvalue={filename}\r\n\t\t\t\t\t\t\t\treadOnly\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t\t<span className=\"file-list__textarea\">\r\n\t\t\t\t\t\t\t<Output file={file}/>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</ul>\r\n\t)\r\n}\r\n\r\nexport default FileList;\r\n","import React, {useCallback, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport classNames from 'classnames';\nimport Copyright from './components/Copyright';\nimport FileList from './components/FileList';\nimport 'normalize.css';\nimport './App.css';\n\nfunction App() {\n    const [files, setFiles] = useState([]);\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map(file => Object.assign(file, {\n            preview: URL.createObjectURL(file),\n        })));\n    }, []);\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n    } = useDropzone({onDrop});\n\n    return (\n        <div className=\"App\">\n            <div\n                {...getRootProps()}\n                className={classNames('drop-zone', {\n                    'drop-zone_active': isDragActive,\n                })}\n            >\n                <input {...getInputProps()}/>\n\n                {isDragActive ? (\n                    <span>\n                        Drop the files here ...\n                    </span>\n                ) : (\n                    <span>\n                        Drag 'n' drop some files here, or click to select files\n                    </span>\n                )}\n            </div>\n\n            <FileList files={files}/>\n\n            <Copyright repoName=\"convert2base64\"/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}