{"version":3,"sources":["components/Copyright.jsx","components/Output.jsx","components/FileList.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Copyright","repoName","className","href","target","rel","Output","file","useState","hash","setHash","useEffect","reader","window","FileReader","readAsDataURL","onloadend","result","handleClick","useCallback","event","select","document","execCommand","value","readOnly","onClick","FileList","files","onClickFileName","e","map","filename","name","substring","lastIndexOf","src","preview","alt","App","setFiles","onDrop","acceptedFiles","Object","assign","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","open","stopPropagation","classNames","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAwBeA,MArBf,YAAgC,IAAZC,EAAW,EAAXA,SAClB,OACE,oBACEC,UAAU,YACVC,KAAI,oCAA+BF,GACnCG,OAAO,SACPC,IAAI,sBAJN,UAME,sBAAMH,UAAU,qBAAhB,sBAIC,IAED,sBAAMA,UAAU,oBAAhB,iC,MCkBSI,MAhCf,YAAyB,IAARC,EAAO,EAAPA,KACf,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACR,IAAMC,EAAS,IAAIC,OAAOC,WAE1BF,EAAOG,cAAcR,GAErBK,EAAOI,UAAY,WACjBN,EAAQE,EAAOK,WAEhB,IAEH,IAAMC,EAAcC,uBAAY,SAAAC,GAC9BA,EAAMhB,OAAOiB,SACbC,SAASC,YAAY,UACpB,IAEH,MAAa,KAATd,EACK,KAIP,0BACEP,UAAU,SACVsB,MAAOf,EACPgB,UAAU,EACVC,QAASR,K,MCUAS,MApCf,YAA4B,IAATC,EAAQ,EAARA,MACXC,EAAkBV,uBAAY,SAAAW,GAClCA,EAAE1B,OAAOiB,SACTC,SAASC,YAAY,UACpB,IAEH,OACE,oBAAIrB,UAAU,YAAd,SACG0B,EAAMG,KAAI,SAAAxB,GACT,IAAMyB,EAAWzB,EAAK0B,KAAKC,UAAU,EAAG3B,EAAK0B,KAAKE,YAAY,MAE9D,OACE,+BACE,uBAAMjC,UAAU,qBAAhB,UACE,qBACEkC,IAAK7B,EAAK8B,QACVC,IAAI,KAGN,uBACEd,MAAOQ,EACPP,UAAU,EACVC,QAASG,OAIb,sBAAM3B,UAAU,sBAAhB,SACE,cAAC,EAAD,CAAQK,KAAMA,QAfTA,EAAK8B,e,YCuCTE,MA/Cf,WACE,MAA0B/B,mBAAS,IAAnC,mBAAOoB,EAAP,KAAcY,EAAd,KAEMC,EAAStB,uBAAY,SAAAuB,GACzBF,EAASE,EAAcX,KAAI,SAAAxB,GAAI,OAAIoC,OAAOC,OAAOrC,EAAM,CACrD8B,QAASQ,IAAIC,gBAAgBvC,WAE9B,IAEH,EAKIwC,YAAY,CAACN,WAJfO,EADF,EACEA,aACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,KAGF,OACE,8CACEjD,UAAU,OACN8C,EAAa,CAACtB,QAAS,SAAAN,GAAK,OAAIA,EAAMgC,sBAF5C,cAIE,qCAAWH,MAEX,qBACE/C,UAAWmD,IAAW,YAAa,CACnC,mBAAoBH,IAEpBxB,QAASyB,EAJX,SAMGD,EACC,2DAIA,6FAMJ,cAAC,EAAD,CAAUtB,MAAOA,IAEjB,cAAC,EAAD,CAAW3B,SAAS,wBCtCNqD,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASrC,SAASsC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94bea343.chunk.js","sourcesContent":["import React from 'react'\nimport './Copyright.css'\n\nfunction Copyright({repoName}) {\n  return (\n    <a\n      className=\"copyright\"\n      href={`https://github.com/vovanr/${repoName}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <span className=\"copyright__license\">\n        MIT Â©\n      </span>\n\n      {' '}\n\n      <span className=\"copyright__author\">\n        Vladimir Rodkin\n      </span>\n    </a>\n  )\n}\n\nexport default Copyright\n","import React, {useCallback, useEffect, useState} from 'react'\nimport './Output.css'\n\nfunction Output({file}) {\n  const [hash, setHash] = useState('')\n\n  useEffect(() => {\n    const reader = new window.FileReader()\n\n    reader.readAsDataURL(file)\n\n    reader.onloadend = () => {\n      setHash(reader.result)\n    }\n  }, [])\n\n  const handleClick = useCallback(event => {\n    event.target.select()\n    document.execCommand('copy')\n  }, [])\n\n  if (hash === '') {\n    return null\n  }\n\n  return (\n    <textarea\n      className=\"output\"\n      value={hash}\n      readOnly={true}\n      onClick={handleClick}\n    />\n  )\n}\n\nexport default Output\n","import React, {useCallback} from 'react'\nimport Output from './Output'\nimport './FileList.css'\n\nfunction FileList({files}) {\n  const onClickFileName = useCallback(e => {\n    e.target.select()\n    document.execCommand('copy')\n  }, [])\n\n  return(\n    <ul className=\"file-list\">\n      {files.map(file => {\n        const filename = file.name.substring(0, file.name.lastIndexOf('.'))\n\n        return (\n          <li key={file.preview}>\n            <span className=\"file-list__preview\">\n              <img\n                src={file.preview}\n                alt=\"\"\n              />\n\n              <input\n                value={filename}\n                readOnly={true}\n                onClick={onClickFileName}\n              />\n            </span>\n\n            <span className=\"file-list__textarea\">\n              <Output file={file}/>\n            </span>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nexport default FileList\n","import React, {useCallback, useState} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport classNames from 'classnames'\nimport Copyright from './components/Copyright'\nimport FileList from './components/FileList'\nimport 'normalize.css'\nimport './App.css'\n\nfunction App() {\n  const [files, setFiles] = useState([])\n\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file),\n    })))\n  }, [])\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    open,\n  } = useDropzone({onDrop})\n\n  return (\n    <div\n      className=\"App\"\n      {...getRootProps({onClick: event => event.stopPropagation()})}\n    >\n      <input {...getInputProps()}/>\n\n      <div\n        className={classNames('drop-zone', {\n        'drop-zone_active': isDragActive,\n        })}\n        onClick={open}\n      >\n        {isDragActive ? (\n          <span>\n            Drop the files here ...\n          </span>\n        ) : (\n          <span>\n            Drag 'n' drop some files here, or click to select files\n          </span>\n        )}\n      </div>\n\n      <FileList files={files}/>\n\n      <Copyright repoName=\"convert2base64\"/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}