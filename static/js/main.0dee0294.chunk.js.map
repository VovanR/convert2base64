{"version":3,"sources":["components/Copyright.jsx","components/Output.jsx","components/FileList.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Copyright","repoName","className","href","target","rel","Output","props","handleClick","e","select","document","execCommand","state","hash","reader","window","FileReader","readAsDataURL","this","file","onloadend","setState","result","value","onClick","readOnly","Component","FileList","files","onClickFileName","useCallback","map","filename","name","substring","lastIndexOf","key","preview","src","alt","App","useState","setFiles","onDrop","acceptedFiles","Object","assign","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","open","stopPropagation","classNames","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAwBeA,MArBf,YAAgC,IAAZC,EAAW,EAAXA,SACnB,OACC,uBACCC,UAAU,YACVC,KAAI,oCAA+BF,GACnCG,OAAO,SACPC,IAAI,uBAEJ,0BAAMH,UAAU,sBAAhB,YAIC,IAED,0BAAMA,UAAU,qBAAhB,qB,qCC4BYI,G,kBAzCd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAmBPC,YAAc,SAACC,GACdA,EAAEL,OAAOM,SACTC,SAASC,YAAY,SAnBrB,EAAKC,MAAQ,CACZC,KAAM,IAJW,E,iFAQE,IAAD,OACbC,EAAS,IAAIC,OAAOC,WAE1BF,EAAOG,cAAcC,KAAKZ,MAAMa,MAEhCL,EAAOM,UAAY,WAClB,EAAKC,SAAS,CACbR,KAAMC,EAAOQ,Y,+BAWf,OAAKJ,KAAKN,MAAMC,KAKf,8BACCZ,UAAU,SACVsB,MAAOL,KAAKN,MAAMC,KAClBW,QAASN,KAAKX,YACdkB,UAAQ,IARF,S,GA5BWC,c,MCqCNC,MApCf,YAA4B,IAATC,EAAQ,EAARA,MACZC,EAAkBC,uBAAY,SAAAtB,GACnCA,EAAEL,OAAOM,SACTC,SAASC,YAAY,WAGtB,OACC,wBAAIV,UAAU,aACZ2B,EAAMG,KAAI,SAAAZ,GACV,IAAMa,EAAWb,EAAKc,KAAKC,UAAU,EAAGf,EAAKc,KAAKE,YAAY,MAE9D,OACC,wBAAIC,IAAKjB,EAAKkB,SACb,0BAAMpC,UAAU,sBACf,yBACCqC,IAAKnB,EAAKkB,QACVE,IAAI,KAGL,2BACChB,MAAOS,EACPR,QAASK,EACTJ,UAAQ,KAIV,0BAAMxB,UAAU,uBACf,kBAAC,EAAD,CAAQkB,KAAMA,W,YCwBNqB,MA/Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNb,EADM,KACCc,EADD,KAGPC,EAASb,uBAAY,SAAAc,GACzBF,EAASE,EAAcb,KAAI,SAAAZ,GAAI,OAAI0B,OAAOC,OAAO3B,EAAM,CACrDkB,QAASU,IAAIC,gBAAgB7B,WAE9B,IAPU,EAcT8B,YAAY,CAACN,WAJfO,EAVW,EAUXA,aACAC,EAXW,EAWXA,cACAC,EAZW,EAYXA,aACAC,EAbW,EAaXA,KAGF,OACE,uCACEpD,UAAU,OACNiD,EAAa,CAAC1B,QAAS,SAAAhB,GAAC,OAAIA,EAAE8C,sBAElC,0BAAWH,KAEX,yBACElD,UAAWsD,IAAW,YAAa,CACjC,mBAAoBH,IAEtB5B,QAAS6B,GAERD,EACC,yDAIA,0FAMJ,kBAAC,EAAD,CAAUxB,MAAOA,IAEjB,kBAAC,EAAD,CAAW5B,SAAS,qBCtCNwD,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnD,SAASoD,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0dee0294.chunk.js","sourcesContent":["import React from 'react';\nimport './Copyright.css';\n\nfunction Copyright({repoName}) {\n\treturn (\n\t\t<a\n\t\t\tclassName=\"copyright\"\n\t\t\thref={`https://github.com/vovanr/${repoName}`}\n\t\t\ttarget=\"_blank\"\n\t\t\trel=\"noopener noreferrer\"\n    >\n\t\t\t<span className=\"copyright__license\">\n\t\t\t\tMIT Â©\n\t\t\t</span>\n\n\t\t\t{' '}\n\n\t\t\t<span className=\"copyright__author\">\n\t\t\t\tVladimir Rodkin\n\t\t\t</span>\n\t\t</a>\n\t);\n}\n\nexport default Copyright;\n","import React, {Component} from 'react';\nimport './Output.css';\n\nclass Output extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\thash: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst reader = new window.FileReader();\n\n\t\treader.readAsDataURL(this.props.file);\n\n\t\treader.onloadend = () => {\n\t\t\tthis.setState({\n\t\t\t\thash: reader.result\n\t\t\t});\n\t\t};\n\t}\n\n\thandleClick = (e) => {\n\t\te.target.select();\n\t\tdocument.execCommand('copy');\n\t};\n\n\trender() {\n\t\tif (!this.state.hash) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (\n\t\t\t<textarea\n\t\t\t\tclassName=\"output\"\n\t\t\t\tvalue={this.state.hash}\n\t\t\t\tonClick={this.handleClick}\n\t\t\t\treadOnly\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Output;\n","import React, {useCallback} from 'react';\nimport Output from './Output';\nimport './FileList.css';\n\nfunction FileList({files}) {\n\tconst onClickFileName = useCallback(e => {\n\t\te.target.select();\n\t\tdocument.execCommand('copy');\n\t});\n\n\treturn(\n\t\t<ul className=\"file-list\">\n\t\t\t{files.map(file => {\n\t\t\t\tconst filename = file.name.substring(0, file.name.lastIndexOf('.'));\n\n\t\t\t\treturn (\n\t\t\t\t\t<li key={file.preview}>\n\t\t\t\t\t\t<span className=\"file-list__preview\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={file.preview}\n\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tvalue={filename}\n\t\t\t\t\t\t\t\tonClick={onClickFileName}\n\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t<span className=\"file-list__textarea\">\n\t\t\t\t\t\t\t<Output file={file}/>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ul>\n\t);\n}\n\nexport default FileList;\n","import React, {useCallback, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport classNames from 'classnames';\nimport Copyright from './components/Copyright';\nimport FileList from './components/FileList';\nimport 'normalize.css';\nimport './App.css';\n\nfunction App() {\n  const [files, setFiles] = useState([]);\n\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file),\n    })));\n  }, []);\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    open,\n  } = useDropzone({onDrop});\n\n  return (\n    <div\n      className=\"App\"\n      {...getRootProps({onClick: e => e.stopPropagation()})}\n    >\n      <input {...getInputProps()}/>\n\n      <div\n        className={classNames('drop-zone', {\n          'drop-zone_active': isDragActive,\n        })}\n        onClick={open}\n      >\n        {isDragActive ? (\n          <span>\n            Drop the files here ...\n          </span>\n        ) : (\n          <span>\n            Drag 'n' drop some files here, or click to select files\n          </span>\n        )}\n      </div>\n\n      <FileList files={files}/>\n\n      <Copyright repoName=\"convert2base64\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}